<div class="question">
    <div class="title">
        Question
    </div>
    <div class="content">
        I'd like to read text from a unicode text file, but don't know how to do
        this. It looks like <var>ReadLn</var> only works with single-byte
        character sets.
    </div>
</div>

<p>
    Not tested:
</p>

<div class="frame">
<!-- Highlighted Pascal code generated by DelphiDabbler PasHi -->
<pre class="pas-source"><span class="pas-kwd">function</span><span class="pas-space"> </span><span class="pas-ident">ReadUnicodeTextFile</span><span class="pas-sym">(</span><span class="pas-ident">aFName</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-kwd">string</span><span class="pas-sym">)</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">WideString</span><span class="pas-sym">;</span>
<span class="pas-kwd">var</span>
<span class="pas-space">  </span><span class="pas-ident">buf</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-kwd">array</span><span class="pas-sym">[</span><span class="pas-num">0</span><span class="pas-sym">..</span><span class="pas-num">1024</span><span class="pas-sym">]</span><span class="pas-space"> </span><span class="pas-kwd">of</span><span class="pas-space"> </span><span class="pas-ident">WideChar</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-ident">f</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-kwd">file</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-ident">dwRest</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">dwRead</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">DWORD</span><span class="pas-sym">;</span>
<span class="pas-kwd">begin</span>
<span class="pas-space">  </span><span class="pas-ident">result</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-str">''</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-ident">Assign</span><span class="pas-sym">(</span><span class="pas-ident">f</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">aFName</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-ident">Reset</span><span class="pas-sym">(</span><span class="pas-ident">f</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-num">1</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-ident">dwRest</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">FileSize</span><span class="pas-sym">(</span><span class="pas-ident">f</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-ident">Assert</span><span class="pas-sym">(</span><span class="pas-sym">(</span><span class="pas-ident">dwRest</span><span class="pas-space"> </span><span class="pas-kwd">mod</span><span class="pas-space"> </span><span class="pas-ident">SizeOf</span><span class="pas-sym">(</span><span class="pas-ident">widechar</span><span class="pas-sym">)</span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-sym">=</span><span class="pas-space"> </span><span class="pas-num">0</span><span class="pas-sym">)</span><span class="pas-sym">;</span><span class="pas-space"> </span><span class="pas-comment">{Unicode chars always 2 bytes}</span>
<span class="pas-space">  </span><span class="pas-kwd">while</span><span class="pas-space"> </span><span class="pas-ident">dwRest</span><span class="pas-space"> </span><span class="pas-sym">&gt;</span><span class="pas-space"> </span><span class="pas-num">1</span><span class="pas-kwd">do</span>
<span class="pas-space">  </span><span class="pas-kwd">begin</span>
<span class="pas-space">    </span><span class="pas-ident">BlockRead</span><span class="pas-sym">(</span><span class="pas-ident">f</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">buf</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">sizeof</span><span class="pas-sym">(</span><span class="pas-ident">buf</span><span class="pas-sym">)</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">dwRead</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-space">    </span><span class="pas-kwd">if</span><span class="pas-space"> </span><span class="pas-ident">dwRest</span><span class="pas-space"> </span><span class="pas-sym">&gt;</span><span class="pas-space"> </span><span class="pas-ident">dwRead</span><span class="pas-space"> </span><span class="pas-kwd">then</span>
<span class="pas-space">      </span><span class="pas-ident">Dec</span><span class="pas-sym">(</span><span class="pas-ident">dwRest</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">dwRead</span><span class="pas-sym">)</span>
<span class="pas-space">    </span><span class="pas-kwd">else</span>
<span class="pas-space">      </span><span class="pas-ident">dwRest</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-num">0</span><span class="pas-sym">;</span>
<span class="pas-space">    </span><span class="pas-ident">buf</span><span class="pas-sym">[</span><span class="pas-ident">dwRead</span><span class="pas-space"> </span><span class="pas-kwd">mod</span><span class="pas-space"> </span><span class="pas-num">2</span><span class="pas-sym">]</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">WideChar</span><span class="pas-sym">(</span><span class="pas-str">#0</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-space">    </span><span class="pas-ident">result</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">result</span><span class="pas-space"> </span><span class="pas-sym">+</span><span class="pas-space"> </span><span class="pas-ident">PWideString</span><span class="pas-sym">(</span><span class="pas-ident">buf</span><span class="pas-sym">)</span><span class="pas-sym">;</span>
<span class="pas-space">  </span><span class="pas-kwd">end</span><span class="pas-sym">;</span>
<span class="pas-kwd">end</span><span class="pas-sym">;</span></pre>
</div>
