<h2>
  Answer 1
</h2>

<p>
  This set of functions shows how to extract the dimensions (width and height)
  of JPG, GIF and PNG files. This code was done quite a while back and while it
  works fine for my purposes, it may be not handle some of the newer stuff like progressive JPEGs and such. Experimentation is highly recommened.
</p>

<div class="frame">
<!-- Highlighted Pascal code generated by DelphiDabbler PasHi -->
<div class="pas-source">
<pre class="line"><span class="pas-kwd">unit</span><span class="pas-space"> </span><span class="pas-ident">ImgSize</span><span class="pas-sym">;</span></pre>
<pre class="line"> </pre>
<pre class="line"><span class="pas-kwd">interface</span></pre>
<pre class="line"> </pre>
<pre class="line"><span class="pas-kwd">uses</span><span class="pas-space"> </span><span class="pas-ident">Classes</span><span class="pas-sym">;</span></pre>
<pre class="line"> </pre>
<pre class="line"><span class="pas-kwd">procedure</span><span class="pas-space"> </span><span class="pas-ident">GetJPGSize</span><span class="pas-sym">(</span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">sFile</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-kwd">string</span><span class="pas-sym">;</span><span class="pas-space"> </span><span class="pas-kwd">var</span><span class="pas-space"> </span><span class="pas-ident">wWidth</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">wHeight</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">word</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-kwd">procedure</span><span class="pas-space"> </span><span class="pas-ident">GetPNGSize</span><span class="pas-sym">(</span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">sFile</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-kwd">string</span><span class="pas-sym">;</span><span class="pas-space"> </span><span class="pas-kwd">var</span><span class="pas-space"> </span><span class="pas-ident">wWidth</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">wHeight</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">word</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-kwd">procedure</span><span class="pas-space"> </span><span class="pas-ident">GetGIFSize</span><span class="pas-sym">(</span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">sGIFFile</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-kwd">string</span><span class="pas-sym">;</span><span class="pas-space"> </span><span class="pas-kwd">var</span><span class="pas-space"> </span><span class="pas-ident">wWidth</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">wHeight</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">word</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"> </pre>
<pre class="line"><span class="pas-kwd">implementation</span></pre>
<pre class="line"> </pre>
<pre class="line"><span class="pas-kwd">uses</span><span class="pas-space"> </span><span class="pas-ident">SysUtils</span><span class="pas-sym">;</span></pre>
<pre class="line"> </pre>
<pre class="line"><span class="pas-kwd">function</span><span class="pas-space"> </span><span class="pas-ident">ReadMWord</span><span class="pas-sym">(</span><span class="pas-ident">f</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TFileStream</span><span class="pas-sym">)</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">word</span><span class="pas-sym">;</span></pre>
<pre class="line"> </pre>
<pre class="line"><span class="pas-kwd">type</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">TMotorolaWord</span><span class="pas-space"> </span><span class="pas-sym">=</span><span class="pas-space"> </span><span class="pas-kwd">record</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-kwd">case</span><span class="pas-space"> </span><span class="pas-ident">byte</span><span class="pas-space"> </span><span class="pas-kwd">of</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-num">0</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-sym">(</span><span class="pas-ident">Value</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">word</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-num">1</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-sym">(</span><span class="pas-ident">Byte1</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">Byte2</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">byte</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-kwd">end</span><span class="pas-sym">;</span></pre>
<pre class="line"> </pre>
<pre class="line"><span class="pas-kwd">var</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">MW</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TMotorolaWord</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-kwd">begin</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-comment">{It would probably be better to just read these two bytes in normally and</span></pre>
<pre class="line"><span class="pas-comment">  then do a small ASM routine to swap them. But we aren't talking about</span></pre>
<pre class="line"><span class="pas-comment">  reading entire files, so I doubt the performance gain would be worth the </span></pre>
<pre class="line"><span class="pas-comment">  trouble.}</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">f</span><span class="pas-sym">.</span><span class="pas-ident">Read</span><span class="pas-sym">(</span><span class="pas-ident">MW</span><span class="pas-sym">.</span><span class="pas-ident">Byte2</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">SizeOf</span><span class="pas-sym">(</span><span class="pas-ident">Byte</span><span class="pas-sym">)</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">f</span><span class="pas-sym">.</span><span class="pas-ident">Read</span><span class="pas-sym">(</span><span class="pas-ident">MW</span><span class="pas-sym">.</span><span class="pas-ident">Byte1</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">SizeOf</span><span class="pas-sym">(</span><span class="pas-ident">Byte</span><span class="pas-sym">)</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">Result</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">MW</span><span class="pas-sym">.</span><span class="pas-ident">Value</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-kwd">end</span><span class="pas-sym">;</span></pre>
<pre class="line"> </pre>
<pre class="line"><span class="pas-kwd">procedure</span><span class="pas-space"> </span><span class="pas-ident">GetJPGSize</span><span class="pas-sym">(</span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">sFile</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-kwd">string</span><span class="pas-sym">;</span><span class="pas-space"> </span><span class="pas-kwd">var</span><span class="pas-space"> </span><span class="pas-ident">wWidth</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">wHeight</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">word</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-kwd">const</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">ValidSig</span><span class="pas-space"> </span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-kwd">array</span><span class="pas-sym">[</span><span class="pas-num">0</span><span class="pas-sym">..</span><span class="pas-num">1</span><span class="pas-sym">]</span><span class="pas-space"> </span><span class="pas-kwd">of</span><span class="pas-space"> </span><span class="pas-ident">byte</span><span class="pas-space"> </span><span class="pas-sym">=</span><span class="pas-space"> </span><span class="pas-sym">(</span><span class="pas-hex">$FF</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-hex">$D8</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">Parameterless</span><span class="pas-space"> </span><span class="pas-sym">=</span><span class="pas-space"> </span><span class="pas-sym">[</span><span class="pas-hex">$01</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-hex">$D0</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-hex">$D1</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-hex">$D2</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-hex">$D3</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-hex">$D4</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-hex">$D5</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-hex">$D6</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-hex">$D7</span><span class="pas-sym">]</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-kwd">var</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">Sig</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-kwd">array</span><span class="pas-sym">[</span><span class="pas-num">0</span><span class="pas-sym">..</span><span class="pas-num">1</span><span class="pas-sym">]</span><span class="pas-space"> </span><span class="pas-kwd">of</span><span class="pas-space"> </span><span class="pas-ident">byte</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">f</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TFileStream</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">x</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">integer</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">Seg</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">byte</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">Dummy</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-kwd">array</span><span class="pas-sym">[</span><span class="pas-num">0</span><span class="pas-sym">..</span><span class="pas-num">15</span><span class="pas-sym">]</span><span class="pas-space"> </span><span class="pas-kwd">of</span><span class="pas-space"> </span><span class="pas-ident">byte</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">Len</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">word</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">ReadLen</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">LongInt</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-kwd">begin</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">FillChar</span><span class="pas-sym">(</span><span class="pas-ident">Sig</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">SizeOf</span><span class="pas-sym">(</span><span class="pas-ident">Sig</span><span class="pas-sym">)</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-str">#0</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">f</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">TFileStream</span><span class="pas-sym">.</span><span class="pas-ident">Create</span><span class="pas-sym">(</span><span class="pas-ident">sFile</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">fmOpenRead</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-kwd">try</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-ident">ReadLen</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">f</span><span class="pas-sym">.</span><span class="pas-ident">Read</span><span class="pas-sym">(</span><span class="pas-ident">Sig</span><span class="pas-sym">[</span><span class="pas-num">0</span><span class="pas-sym">]</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">SizeOf</span><span class="pas-sym">(</span><span class="pas-ident">Sig</span><span class="pas-sym">)</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-kwd">for</span><span class="pas-space"> </span><span class="pas-ident">x</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">Low</span><span class="pas-sym">(</span><span class="pas-ident">Sig</span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-kwd">to</span><span class="pas-space"> </span><span class="pas-ident">High</span><span class="pas-sym">(</span><span class="pas-ident">Sig</span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-kwd">do</span></pre>
<pre class="line"><span class="pas-space">      </span><span class="pas-kwd">if</span><span class="pas-space"> </span><span class="pas-ident">Sig</span><span class="pas-sym">[</span><span class="pas-ident">x</span><span class="pas-sym">]</span><span class="pas-space"> </span><span class="pas-sym">&lt;&gt;</span><span class="pas-space"> </span><span class="pas-ident">ValidSig</span><span class="pas-sym">[</span><span class="pas-ident">x</span><span class="pas-sym">]</span><span class="pas-space"> </span><span class="pas-kwd">then</span></pre>
<pre class="line"><span class="pas-space">        </span><span class="pas-ident">ReadLen</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-num">0</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">      </span><span class="pas-kwd">if</span><span class="pas-space"> </span><span class="pas-ident">ReadLen</span><span class="pas-space"> </span><span class="pas-sym">&gt;</span><span class="pas-space"> </span><span class="pas-num">0</span><span class="pas-space"> </span><span class="pas-kwd">then</span></pre>
<pre class="line"><span class="pas-space">      </span><span class="pas-kwd">begin</span></pre>
<pre class="line"><span class="pas-space">        </span><span class="pas-ident">ReadLen</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">f</span><span class="pas-sym">.</span><span class="pas-ident">Read</span><span class="pas-sym">(</span><span class="pas-ident">Seg</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-num">1</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">        </span><span class="pas-kwd">while</span><span class="pas-space"> </span><span class="pas-sym">(</span><span class="pas-ident">Seg</span><span class="pas-space"> </span><span class="pas-sym">=</span><span class="pas-space"> </span><span class="pas-hex">$FF</span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-kwd">and</span><span class="pas-space"> </span><span class="pas-sym">(</span><span class="pas-ident">ReadLen</span><span class="pas-space"> </span><span class="pas-sym">&gt;</span><span class="pas-space"> </span><span class="pas-num">0</span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-kwd">do</span></pre>
<pre class="line"><span class="pas-space">        </span><span class="pas-kwd">begin</span></pre>
<pre class="line"><span class="pas-space">          </span><span class="pas-ident">ReadLen</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">f</span><span class="pas-sym">.</span><span class="pas-ident">Read</span><span class="pas-sym">(</span><span class="pas-ident">Seg</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-num">1</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">          </span><span class="pas-kwd">if</span><span class="pas-space"> </span><span class="pas-ident">Seg</span><span class="pas-space"> </span><span class="pas-sym">&lt;&gt;</span><span class="pas-space"> </span><span class="pas-hex">$FF</span><span class="pas-space"> </span><span class="pas-kwd">then</span></pre>
<pre class="line"><span class="pas-space">          </span><span class="pas-kwd">begin</span></pre>
<pre class="line"><span class="pas-space">            </span><span class="pas-kwd">if</span><span class="pas-space"> </span><span class="pas-sym">(</span><span class="pas-ident">Seg</span><span class="pas-space"> </span><span class="pas-sym">=</span><span class="pas-space"> </span><span class="pas-hex">$C0</span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-kwd">or</span><span class="pas-space"> </span><span class="pas-sym">(</span><span class="pas-ident">Seg</span><span class="pas-space"> </span><span class="pas-sym">=</span><span class="pas-space"> </span><span class="pas-hex">$C1</span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-kwd">then</span></pre>
<pre class="line"><span class="pas-space">            </span><span class="pas-kwd">begin</span></pre>
<pre class="line"><span class="pas-space">              </span><span class="pas-ident">ReadLen</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">f</span><span class="pas-sym">.</span><span class="pas-ident">Read</span><span class="pas-sym">(</span><span class="pas-ident">Dummy</span><span class="pas-sym">[</span><span class="pas-num">0</span><span class="pas-sym">]</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-num">3</span><span class="pas-sym">)</span><span class="pas-sym">;</span><span class="pas-space">  </span><span class="pas-comment">{ don't need these bytes }</span></pre>
<pre class="line"><span class="pas-space">              </span><span class="pas-ident">wHeight</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">ReadMWord</span><span class="pas-sym">(</span><span class="pas-ident">f</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">              </span><span class="pas-ident">wWidth</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">ReadMWord</span><span class="pas-sym">(</span><span class="pas-ident">f</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">            </span><span class="pas-kwd">end</span></pre>
<pre class="line"><span class="pas-space">            </span><span class="pas-kwd">else</span></pre>
<pre class="line"><span class="pas-space">            </span><span class="pas-kwd">begin</span></pre>
<pre class="line"><span class="pas-space">              </span><span class="pas-kwd">if</span><span class="pas-space"> </span><span class="pas-kwd">not</span><span class="pas-space"> </span><span class="pas-sym">(</span><span class="pas-ident">Seg</span><span class="pas-space"> </span><span class="pas-kwd">in</span><span class="pas-space"> </span><span class="pas-ident">Parameterless</span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-kwd">then</span></pre>
<pre class="line"><span class="pas-space">              </span><span class="pas-kwd">begin</span></pre>
<pre class="line"><span class="pas-space">                </span><span class="pas-ident">Len</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">ReadMWord</span><span class="pas-sym">(</span><span class="pas-ident">f</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">                </span><span class="pas-ident">f</span><span class="pas-sym">.</span><span class="pas-ident">Seek</span><span class="pas-sym">(</span><span class="pas-ident">Len</span><span class="pas-space"> </span><span class="pas-sym">-</span><span class="pas-space"> </span><span class="pas-num">2</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-num">1</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">                </span><span class="pas-ident">f</span><span class="pas-sym">.</span><span class="pas-ident">Read</span><span class="pas-sym">(</span><span class="pas-ident">Seg</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-num">1</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">              </span><span class="pas-kwd">end</span></pre>
<pre class="line"><span class="pas-space">              </span><span class="pas-kwd">else</span></pre>
<pre class="line"><span class="pas-space">                </span><span class="pas-ident">Seg</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-hex">$FF</span><span class="pas-sym">;</span><span class="pas-space">  </span><span class="pas-comment">{ Fake it to keep looping. }</span></pre>
<pre class="line"><span class="pas-space">            </span><span class="pas-kwd">end</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">          </span><span class="pas-kwd">end</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">        </span><span class="pas-kwd">end</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">      </span><span class="pas-kwd">end</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-kwd">finally</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-ident">f</span><span class="pas-sym">.</span><span class="pas-ident">Free</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-kwd">end</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-kwd">end</span><span class="pas-sym">;</span></pre>
<pre class="line"> </pre>
<pre class="line"><span class="pas-kwd">procedure</span><span class="pas-space"> </span><span class="pas-ident">GetPNGSize</span><span class="pas-sym">(</span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">sFile</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-kwd">string</span><span class="pas-sym">;</span><span class="pas-space"> </span><span class="pas-kwd">var</span><span class="pas-space"> </span><span class="pas-ident">wWidth</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">wHeight</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">word</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-kwd">type</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">TPNGSig</span><span class="pas-space"> </span><span class="pas-sym">=</span><span class="pas-space"> </span><span class="pas-kwd">array</span><span class="pas-sym">[</span><span class="pas-num">0</span><span class="pas-sym">..</span><span class="pas-num">7</span><span class="pas-sym">]</span><span class="pas-space"> </span><span class="pas-kwd">of</span><span class="pas-space"> </span><span class="pas-ident">byte</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-kwd">const</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">ValidSig</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TPNGSig</span><span class="pas-space"> </span><span class="pas-sym">=</span><span class="pas-space"> </span><span class="pas-sym">(</span><span class="pas-num">137</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-num">80</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-num">78</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-num">71</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-num">13</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-num">10</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-num">26</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-num">10</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-kwd">var</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">Sig</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TPNGSig</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">f</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">tFileStream</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">x</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">integer</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-kwd">begin</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">FillChar</span><span class="pas-sym">(</span><span class="pas-ident">Sig</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">SizeOf</span><span class="pas-sym">(</span><span class="pas-ident">Sig</span><span class="pas-sym">)</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-str">#0</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">f</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">TFileStream</span><span class="pas-sym">.</span><span class="pas-ident">Create</span><span class="pas-sym">(</span><span class="pas-ident">sFile</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">fmOpenRead</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-kwd">try</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-ident">f</span><span class="pas-sym">.</span><span class="pas-ident">Read</span><span class="pas-sym">(</span><span class="pas-ident">Sig</span><span class="pas-sym">[</span><span class="pas-num">0</span><span class="pas-sym">]</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">SizeOf</span><span class="pas-sym">(</span><span class="pas-ident">Sig</span><span class="pas-sym">)</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-kwd">for</span><span class="pas-space"> </span><span class="pas-ident">x</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">Low</span><span class="pas-sym">(</span><span class="pas-ident">Sig</span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-kwd">to</span><span class="pas-space"> </span><span class="pas-ident">High</span><span class="pas-sym">(</span><span class="pas-ident">Sig</span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-kwd">do</span></pre>
<pre class="line"><span class="pas-space">      </span><span class="pas-kwd">if</span><span class="pas-space"> </span><span class="pas-ident">Sig</span><span class="pas-sym">[</span><span class="pas-ident">x</span><span class="pas-sym">]</span><span class="pas-space"> </span><span class="pas-sym">&lt;&gt;</span><span class="pas-space"> </span><span class="pas-ident">ValidSig</span><span class="pas-sym">[</span><span class="pas-ident">x</span><span class="pas-sym">]</span><span class="pas-space"> </span><span class="pas-kwd">then</span></pre>
<pre class="line"><span class="pas-space">        </span><span class="pas-ident">exit</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">      </span><span class="pas-ident">f</span><span class="pas-sym">.</span><span class="pas-ident">Seek</span><span class="pas-sym">(</span><span class="pas-num">18</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-num">0</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">      </span><span class="pas-ident">wWidth</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">ReadMWord</span><span class="pas-sym">(</span><span class="pas-ident">f</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">      </span><span class="pas-ident">f</span><span class="pas-sym">.</span><span class="pas-ident">Seek</span><span class="pas-sym">(</span><span class="pas-num">22</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-num">0</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">      </span><span class="pas-ident">wHeight</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">ReadMWord</span><span class="pas-sym">(</span><span class="pas-ident">f</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-kwd">finally</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-ident">f</span><span class="pas-sym">.</span><span class="pas-ident">Free</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-kwd">end</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-kwd">end</span><span class="pas-sym">;</span></pre>
<pre class="line"> </pre>
<pre class="line"> </pre>
<pre class="line"><span class="pas-kwd">procedure</span><span class="pas-space"> </span><span class="pas-ident">GetGIFSize</span><span class="pas-sym">(</span><span class="pas-kwd">const</span><span class="pas-space"> </span><span class="pas-ident">sGIFFile</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-kwd">string</span><span class="pas-sym">;</span><span class="pas-space"> </span><span class="pas-kwd">var</span><span class="pas-space"> </span><span class="pas-ident">wWidth</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">wHeight</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">word</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-kwd">type</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">TGIFHeader</span><span class="pas-space"> </span><span class="pas-sym">=</span><span class="pas-space"> </span><span class="pas-kwd">record</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">Sig</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-kwd">array</span><span class="pas-sym">[</span><span class="pas-num">0</span><span class="pas-sym">..</span><span class="pas-num">5</span><span class="pas-sym">]</span><span class="pas-space"> </span><span class="pas-kwd">of</span><span class="pas-space"> </span><span class="pas-ident">char</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">ScreenWidth</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">ScreenHeight</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">word</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">Flags</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">Background</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">Aspect</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">byte</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-kwd">end</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">TGIFImageBlock</span><span class="pas-space"> </span><span class="pas-sym">=</span><span class="pas-space"> </span><span class="pas-kwd">record</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">Left</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">Top</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">Width</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">Height</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">word</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">Flags</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">byte</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-kwd">end</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-kwd">var</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">f</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-kwd">file</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">Header</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TGifHeader</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">ImageBlock</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TGifImageBlock</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">nResult</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">integer</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">x</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">integer</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">c</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">char</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">DimensionsFound</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">boolean</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-kwd">begin</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">wWidth</span><span class="pas-space">  </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-num">0</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">wHeight</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-num">0</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-kwd">if</span><span class="pas-space"> </span><span class="pas-ident">sGifFile</span><span class="pas-space"> </span><span class="pas-sym">=</span><span class="pas-space"> </span><span class="pas-str">''</span><span class="pas-space"> </span><span class="pas-kwd">then</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-ident">exit</span><span class="pas-sym">;</span></pre>
<pre class="line"> </pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-preproc">{$I-}</span></pre>
<pre class="line"> </pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">FileMode</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-num">0</span><span class="pas-sym">;</span><span class="pas-space">  </span><span class="pas-comment">{ read-only }</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">AssignFile</span><span class="pas-sym">(</span><span class="pas-ident">f</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">sGifFile</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">reset</span><span class="pas-sym">(</span><span class="pas-ident">f</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-num">1</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-kwd">if</span><span class="pas-space"> </span><span class="pas-ident">IOResult</span><span class="pas-space"> </span><span class="pas-sym">&lt;&gt;</span><span class="pas-space"> </span><span class="pas-num">0</span><span class="pas-space"> </span><span class="pas-kwd">then</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-comment">{Could not open file}</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">exit</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-comment">{Read header and ensure valid file}</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">BlockRead</span><span class="pas-sym">(</span><span class="pas-ident">f</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">Header</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">SizeOf</span><span class="pas-sym">(</span><span class="pas-ident">TGifHeader</span><span class="pas-sym">)</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">nResult</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-kwd">if</span><span class="pas-space"> </span><span class="pas-sym">(</span><span class="pas-ident">nResult</span><span class="pas-space"> </span><span class="pas-sym">&lt;&gt;</span><span class="pas-space"> </span><span class="pas-ident">SizeOf</span><span class="pas-sym">(</span><span class="pas-ident">TGifHeader</span><span class="pas-sym">)</span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-kwd">or</span><span class="pas-space"> </span><span class="pas-sym">(</span><span class="pas-ident">IOResult</span><span class="pas-space"> </span><span class="pas-sym">&lt;&gt;</span><span class="pas-space"> </span><span class="pas-num">0</span><span class="pas-sym">)</span><span class="pas-space"> </span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-kwd">or</span><span class="pas-space"> </span><span class="pas-sym">(</span><span class="pas-ident">StrLComp</span><span class="pas-sym">(</span><span class="pas-str">'GIF'</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">Header</span><span class="pas-sym">.</span><span class="pas-ident">Sig</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-num">3</span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-sym">&lt;&gt;</span><span class="pas-space"> </span><span class="pas-num">0</span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-kwd">then</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-kwd">begin</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-comment">{Image file invalid}</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-ident">close</span><span class="pas-sym">(</span><span class="pas-ident">f</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-ident">exit</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-kwd">end</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-comment">{Skip color map, if there is one}</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-kwd">if</span><span class="pas-space"> </span><span class="pas-sym">(</span><span class="pas-ident">Header</span><span class="pas-sym">.</span><span class="pas-ident">Flags</span><span class="pas-space"> </span><span class="pas-kwd">and</span><span class="pas-space"> </span><span class="pas-hex">$80</span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-sym">&gt;</span><span class="pas-space"> </span><span class="pas-num">0</span><span class="pas-space"> </span><span class="pas-kwd">then</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-kwd">begin</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-ident">x</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-num">3</span><span class="pas-space"> </span><span class="pas-sym">*</span><span class="pas-space"> </span><span class="pas-sym">(</span><span class="pas-num">1</span><span class="pas-space"> </span><span class="pas-kwd">SHL</span><span class="pas-space"> </span><span class="pas-sym">(</span><span class="pas-sym">(</span><span class="pas-ident">Header</span><span class="pas-sym">.</span><span class="pas-ident">Flags</span><span class="pas-space"> </span><span class="pas-kwd">and</span><span class="pas-space"> </span><span class="pas-num">7</span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-sym">+</span><span class="pas-space"> </span><span class="pas-num">1</span><span class="pas-sym">)</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-ident">Seek</span><span class="pas-sym">(</span><span class="pas-ident">f</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">x</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-kwd">if</span><span class="pas-space"> </span><span class="pas-ident">IOResult</span><span class="pas-space"> </span><span class="pas-sym">&lt;&gt;</span><span class="pas-space"> </span><span class="pas-num">0</span><span class="pas-space"> </span><span class="pas-kwd">then</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-kwd">begin</span></pre>
<pre class="line"><span class="pas-space">      </span><span class="pas-comment">{ Color map thrashed }</span></pre>
<pre class="line"><span class="pas-space">      </span><span class="pas-ident">close</span><span class="pas-sym">(</span><span class="pas-ident">f</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">      </span><span class="pas-ident">exit</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-kwd">end</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-kwd">end</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">DimensionsFound</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">False</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">FillChar</span><span class="pas-sym">(</span><span class="pas-ident">ImageBlock</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">SizeOf</span><span class="pas-sym">(</span><span class="pas-ident">TGIFImageBlock</span><span class="pas-sym">)</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-str">#0</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-comment">{ Step through blocks }</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">BlockRead</span><span class="pas-sym">(</span><span class="pas-ident">f</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">c</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-num">1</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">nResult</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-kwd">while</span><span class="pas-space"> </span><span class="pas-sym">(</span><span class="pas-kwd">not</span><span class="pas-space"> </span><span class="pas-ident">EOF</span><span class="pas-sym">(</span><span class="pas-ident">f</span><span class="pas-sym">)</span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-kwd">and</span><span class="pas-space"> </span><span class="pas-sym">(</span><span class="pas-kwd">not</span><span class="pas-space"> </span><span class="pas-ident">DimensionsFound</span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-kwd">do</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-kwd">begin</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-kwd">case</span><span class="pas-space"> </span><span class="pas-ident">c</span><span class="pas-space"> </span><span class="pas-kwd">of</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-str">','</span><span class="pas-sym">:</span><span class="pas-space">  </span><span class="pas-comment">{ Found image }</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-kwd">begin</span></pre>
<pre class="line"><span class="pas-space">      </span><span class="pas-ident">BlockRead</span><span class="pas-sym">(</span><span class="pas-ident">f</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">ImageBlock</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">SizeOf</span><span class="pas-sym">(</span><span class="pas-ident">TGIFImageBlock</span><span class="pas-sym">)</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">nResult</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">      </span><span class="pas-kwd">if</span><span class="pas-space"> </span><span class="pas-ident">nResult</span><span class="pas-space"> </span><span class="pas-sym">&lt;&gt;</span><span class="pas-space"> </span><span class="pas-ident">SizeOf</span><span class="pas-sym">(</span><span class="pas-ident">TGIFImageBlock</span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-kwd">then</span></pre>
<pre class="line"><span class="pas-space">      </span><span class="pas-kwd">begin</span></pre>
<pre class="line"><span class="pas-space">        </span><span class="pas-comment">{ Invalid image block encountered }</span></pre>
<pre class="line"><span class="pas-space">        </span><span class="pas-ident">close</span><span class="pas-sym">(</span><span class="pas-ident">f</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">        </span><span class="pas-ident">exit</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">      </span><span class="pas-kwd">end</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">      </span><span class="pas-ident">wWidth</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">ImageBlock</span><span class="pas-sym">.</span><span class="pas-ident">Width</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">      </span><span class="pas-ident">wHeight</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">ImageBlock</span><span class="pas-sym">.</span><span class="pas-ident">Height</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">      </span><span class="pas-ident">DimensionsFound</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">True</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-kwd">end</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-str">','</span><span class="pas-space"> </span><span class="pas-sym">:</span><span class="pas-space">  </span><span class="pas-comment">{ Skip }</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-kwd">begin</span></pre>
<pre class="line"><span class="pas-space">      </span><span class="pas-comment">{ NOP }</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-kwd">end</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-comment">{ nothing else, just ignore }</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-kwd">end</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">BlockRead</span><span class="pas-sym">(</span><span class="pas-ident">f</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">c</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-num">1</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">nResult</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-kwd">end</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-ident">close</span><span class="pas-sym">(</span><span class="pas-ident">f</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"> </pre>
<pre class="line"><span class="pas-preproc">{$I+}</span></pre>
<pre class="line"> </pre>
<pre class="line"><span class="pas-kwd">end</span><span class="pas-sym">;</span></pre>
<pre class="line"> </pre>
<pre class="line"><span class="pas-kwd">end</span><span class="pas-sym">.</span></pre>
</div>
</div>

<p class="credits">
  Tip author unknown
</p>

<h2>
  Answer 2
</h2>

Getting the size of a *.jpg and *.gif image:

<div class="frame">
<!-- Highlighted Pascal code generated by DelphiDabbler PasHi -->
<div class="pas-source">
<pre class="line"><span class="pas-comment">{resourcestring</span></pre>
<pre class="line"><span class="pas-comment">  SInvalidImage = 'Image is not valid';}</span></pre>
<pre class="line"> </pre>
<pre class="line"><span class="pas-kwd">type</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">TImageType</span><span class="pas-space"> </span><span class="pas-sym">=</span><span class="pas-space"> </span><span class="pas-sym">(</span><span class="pas-ident">itUnknown</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">itJPG</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">itGIF</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"> </pre>
<pre class="line"><span class="pas-kwd">function</span><span class="pas-space"> </span><span class="pas-ident">GetImageType</span><span class="pas-sym">(</span><span class="pas-ident">Image</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">PByte</span><span class="pas-sym">)</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TImageType</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-kwd">var</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">pImage</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">PChar</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-kwd">begin</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">pImage</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">PChar</span><span class="pas-sym">(</span><span class="pas-ident">Image</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">Result</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">itUnknown</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-kwd">if</span><span class="pas-space"> </span><span class="pas-ident">StrLComp</span><span class="pas-sym">(</span><span class="pas-ident">pImage</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-str">'GIF'</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-num">3</span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-sym">=</span><span class="pas-space"> </span><span class="pas-num">0</span><span class="pas-space"> </span><span class="pas-kwd">then</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-kwd">begin</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-ident">Result</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">itGIF</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-kwd">end</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-kwd">else</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-kwd">if</span><span class="pas-space"> </span><span class="pas-sym">(</span><span class="pas-ident">pImage</span><span class="pas-sym">[</span><span class="pas-num">0</span><span class="pas-sym">]</span><span class="pas-space"> </span><span class="pas-sym">=</span><span class="pas-space"> </span><span class="pas-str">#$FF</span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-kwd">and</span><span class="pas-space"> </span><span class="pas-sym">(</span><span class="pas-ident">pImage</span><span class="pas-sym">[</span><span class="pas-num">1</span><span class="pas-sym">]</span><span class="pas-space"> </span><span class="pas-sym">=</span><span class="pas-space"> </span><span class="pas-str">#$D8</span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-kwd">then</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-kwd">begin</span></pre>
<pre class="line"><span class="pas-space">      </span><span class="pas-ident">Result</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">itJPG</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-kwd">end</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-kwd">end</span><span class="pas-sym">;</span></pre>
<pre class="line"> </pre>
<pre class="line"><span class="pas-kwd">procedure</span><span class="pas-space"> </span><span class="pas-ident">GetImageBounds</span><span class="pas-sym">(</span><span class="pas-ident">Image</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">PByte</span><span class="pas-sym">;</span><span class="pas-space"> </span><span class="pas-ident">Size</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">Integer</span><span class="pas-sym">;</span><span class="pas-space"> </span><span class="pas-kwd">var</span><span class="pas-space"> </span><span class="pas-ident">Width</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">Cardinal</span><span class="pas-sym">;</span><span class="pas-space"> </span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-kwd">var</span><span class="pas-space"> </span><span class="pas-ident">Height</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">Cardinal</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-kwd">const</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">SizeSegments</span><span class="pas-space"> </span><span class="pas-sym">=</span><span class="pas-space"> </span><span class="pas-sym">[</span><span class="pas-str">#$C0</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-str">#$C1</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-str">#$C2</span><span class="pas-sym">]</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-kwd">var</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">pImage</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">PChar</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">ImageType</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TImageType</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">cSegmentType</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">Char</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">nSegmentSize</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">Word</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">nPos</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">Integer</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">bFound</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">Boolean</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-kwd">begin</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">ImageType</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">GetImageType</span><span class="pas-sym">(</span><span class="pas-ident">Image</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">pImage</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">PChar</span><span class="pas-sym">(</span><span class="pas-ident">Image</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-kwd">case</span><span class="pas-space"> </span><span class="pas-ident">ImageType</span><span class="pas-space"> </span><span class="pas-kwd">of</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">itJPG</span><span class="pas-sym">:</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-kwd">begin</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-ident">nPos</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-num">2</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-ident">bFound</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">False</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-kwd">while</span><span class="pas-space"> </span><span class="pas-kwd">not</span><span class="pas-space"> </span><span class="pas-ident">bFound</span><span class="pas-space"> </span><span class="pas-kwd">and</span><span class="pas-space"> </span><span class="pas-sym">(</span><span class="pas-ident">nPos</span><span class="pas-space"> </span><span class="pas-sym">&lt;</span><span class="pas-space"> </span><span class="pas-ident">Size</span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-kwd">do</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-kwd">begin</span></pre>
<pre class="line"><span class="pas-space">      </span><span class="pas-kwd">if</span><span class="pas-space"> </span><span class="pas-ident">pImage</span><span class="pas-sym">[</span><span class="pas-ident">nPos</span><span class="pas-sym">]</span><span class="pas-space"> </span><span class="pas-sym">&lt;&gt;</span><span class="pas-space"> </span><span class="pas-str">#$FF</span><span class="pas-space"> </span><span class="pas-kwd">then</span></pre>
<pre class="line"><span class="pas-space">      </span><span class="pas-kwd">begin</span></pre>
<pre class="line"><span class="pas-space">        </span><span class="pas-ident">EInvalidGraphic</span><span class="pas-sym">.</span><span class="pas-ident">Create</span><span class="pas-sym">(</span><span class="pas-ident">SInvalidImage</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">      </span><span class="pas-kwd">end</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">      </span><span class="pas-ident">Inc</span><span class="pas-sym">(</span><span class="pas-ident">nPos</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">      </span><span class="pas-kwd">if</span><span class="pas-space"> </span><span class="pas-ident">nPos</span><span class="pas-space"> </span><span class="pas-sym">&gt;=</span><span class="pas-space"> </span><span class="pas-ident">Size</span><span class="pas-space"> </span><span class="pas-kwd">then</span></pre>
<pre class="line"><span class="pas-space">      </span><span class="pas-kwd">begin</span></pre>
<pre class="line"><span class="pas-space">        </span><span class="pas-kwd">raise</span><span class="pas-space"> </span><span class="pas-ident">EInvalidGraphic</span><span class="pas-sym">.</span><span class="pas-ident">Create</span><span class="pas-sym">(</span><span class="pas-ident">SInvalidImage</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">      </span><span class="pas-kwd">end</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">      </span><span class="pas-ident">cSegmentType</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">pImage</span><span class="pas-sym">[</span><span class="pas-ident">nPos</span><span class="pas-sym">]</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">      </span><span class="pas-ident">bFound</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">cSegmentType</span><span class="pas-space"> </span><span class="pas-kwd">in</span><span class="pas-space"> </span><span class="pas-ident">SizeSegments</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">      </span><span class="pas-kwd">if</span><span class="pas-space"> </span><span class="pas-kwd">not</span><span class="pas-space"> </span><span class="pas-ident">bFound</span><span class="pas-space"> </span><span class="pas-kwd">then</span></pre>
<pre class="line"><span class="pas-space">      </span><span class="pas-kwd">begin</span></pre>
<pre class="line"><span class="pas-space">        </span><span class="pas-ident">Inc</span><span class="pas-sym">(</span><span class="pas-ident">nPos</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">        </span><span class="pas-kwd">if</span><span class="pas-space"> </span><span class="pas-kwd">not</span><span class="pas-space"> </span><span class="pas-sym">(</span><span class="pas-ident">cSegmentType</span><span class="pas-space"> </span><span class="pas-kwd">in</span><span class="pas-space"> </span><span class="pas-sym">[</span><span class="pas-str">#$01</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-str">#$d0</span><span class="pas-sym">..</span><span class="pas-str">#$d7</span><span class="pas-sym">]</span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-kwd">then</span></pre>
<pre class="line"><span class="pas-space">        </span><span class="pas-kwd">begin</span></pre>
<pre class="line"><span class="pas-space">          </span><span class="pas-kwd">if</span><span class="pas-space"> </span><span class="pas-ident">nPos</span><span class="pas-space"> </span><span class="pas-sym">&gt;=</span><span class="pas-space"> </span><span class="pas-ident">Size</span><span class="pas-space"> </span><span class="pas-sym">-</span><span class="pas-space"> </span><span class="pas-num">1</span><span class="pas-space"> </span><span class="pas-kwd">then</span></pre>
<pre class="line"><span class="pas-space">          </span><span class="pas-kwd">begin</span></pre>
<pre class="line"><span class="pas-space">            </span><span class="pas-kwd">raise</span><span class="pas-space"> </span><span class="pas-ident">EInvalidGraphic</span><span class="pas-sym">.</span><span class="pas-ident">Create</span><span class="pas-sym">(</span><span class="pas-ident">SInvalidImage</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">          </span><span class="pas-kwd">end</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">          </span><span class="pas-ident">nSegmentSize</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">MakeWord</span><span class="pas-sym">(</span><span class="pas-ident">Byte</span><span class="pas-sym">(</span><span class="pas-ident">pImage</span><span class="pas-sym">[</span><span class="pas-ident">nPos</span><span class="pas-space"> </span><span class="pas-sym">+</span><span class="pas-space"> </span><span class="pas-num">1</span><span class="pas-sym">]</span><span class="pas-sym">)</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">Byte</span><span class="pas-sym">(</span><span class="pas-ident">pImage</span><span class="pas-sym">[</span><span class="pas-ident">nPos</span><span class="pas-sym">]</span><span class="pas-sym">)</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">          </span><span class="pas-ident">Inc</span><span class="pas-sym">(</span><span class="pas-ident">nPos</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">nSegmentSize</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">        </span><span class="pas-kwd">end</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">      </span><span class="pas-kwd">end</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-kwd">end</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-kwd">if</span><span class="pas-space"> </span><span class="pas-kwd">not</span><span class="pas-space"> </span><span class="pas-ident">bFound</span><span class="pas-space"> </span><span class="pas-kwd">then</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-kwd">begin</span></pre>
<pre class="line"><span class="pas-space">      </span><span class="pas-kwd">raise</span><span class="pas-space"> </span><span class="pas-ident">EInvalidGraphic</span><span class="pas-sym">.</span><span class="pas-ident">Create</span><span class="pas-sym">(</span><span class="pas-ident">SInvalidImage</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-kwd">end</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-ident">Inc</span><span class="pas-sym">(</span><span class="pas-ident">nPos</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-num">4</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-kwd">if</span><span class="pas-space"> </span><span class="pas-ident">nPos</span><span class="pas-space"> </span><span class="pas-sym">&gt;=</span><span class="pas-space"> </span><span class="pas-ident">Size</span><span class="pas-space"> </span><span class="pas-sym">-</span><span class="pas-space"> </span><span class="pas-num">1</span><span class="pas-space"> </span><span class="pas-kwd">then</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-kwd">begin</span></pre>
<pre class="line"><span class="pas-space">      </span><span class="pas-kwd">raise</span><span class="pas-space"> </span><span class="pas-ident">EInvalidGraphic</span><span class="pas-sym">.</span><span class="pas-ident">Create</span><span class="pas-sym">(</span><span class="pas-ident">SInvalidImage</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-kwd">end</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-ident">Height</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">MakeWord</span><span class="pas-sym">(</span><span class="pas-ident">Byte</span><span class="pas-sym">(</span><span class="pas-ident">pImage</span><span class="pas-sym">[</span><span class="pas-ident">nPos</span><span class="pas-space"> </span><span class="pas-sym">+</span><span class="pas-space"> </span><span class="pas-num">1</span><span class="pas-sym">]</span><span class="pas-sym">)</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">Byte</span><span class="pas-sym">(</span><span class="pas-ident">pImage</span><span class="pas-sym">[</span><span class="pas-ident">nPos</span><span class="pas-sym">]</span><span class="pas-sym">)</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-ident">Inc</span><span class="pas-sym">(</span><span class="pas-ident">nPos</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-num">2</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-kwd">if</span><span class="pas-space"> </span><span class="pas-ident">nPos</span><span class="pas-space"> </span><span class="pas-sym">&gt;=</span><span class="pas-space"> </span><span class="pas-ident">Size</span><span class="pas-space"> </span><span class="pas-sym">-</span><span class="pas-space"> </span><span class="pas-num">1</span><span class="pas-space"> </span><span class="pas-kwd">then</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-kwd">begin</span></pre>
<pre class="line"><span class="pas-space">      </span><span class="pas-kwd">raise</span><span class="pas-space"> </span><span class="pas-ident">EInvalidGraphic</span><span class="pas-sym">.</span><span class="pas-ident">Create</span><span class="pas-sym">(</span><span class="pas-ident">SInvalidImage</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-kwd">end</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-ident">Width</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">MakeWord</span><span class="pas-sym">(</span><span class="pas-ident">Byte</span><span class="pas-sym">(</span><span class="pas-ident">pImage</span><span class="pas-sym">[</span><span class="pas-ident">nPos</span><span class="pas-space"> </span><span class="pas-sym">+</span><span class="pas-space"> </span><span class="pas-num">1</span><span class="pas-sym">]</span><span class="pas-sym">)</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">Byte</span><span class="pas-sym">(</span><span class="pas-ident">pImage</span><span class="pas-sym">[</span><span class="pas-ident">nPos</span><span class="pas-sym">]</span><span class="pas-sym">)</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-kwd">end</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">itGIF</span><span class="pas-sym">:</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-kwd">begin</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-ident">nPos</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-num">6</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-kwd">if</span><span class="pas-space"> </span><span class="pas-ident">nPos</span><span class="pas-space"> </span><span class="pas-sym">&gt;=</span><span class="pas-space"> </span><span class="pas-ident">Size</span><span class="pas-space"> </span><span class="pas-sym">-</span><span class="pas-space"> </span><span class="pas-num">1</span><span class="pas-space"> </span><span class="pas-kwd">then</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-kwd">begin</span></pre>
<pre class="line"><span class="pas-space">      </span><span class="pas-kwd">raise</span><span class="pas-space"> </span><span class="pas-ident">EInvalidGraphic</span><span class="pas-sym">.</span><span class="pas-ident">Create</span><span class="pas-sym">(</span><span class="pas-ident">SInvalidImage</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-kwd">end</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-ident">Width</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">MakeWord</span><span class="pas-sym">(</span><span class="pas-ident">Byte</span><span class="pas-sym">(</span><span class="pas-ident">pImage</span><span class="pas-sym">[</span><span class="pas-ident">nPos</span><span class="pas-sym">]</span><span class="pas-sym">)</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">Byte</span><span class="pas-sym">(</span><span class="pas-ident">pImage</span><span class="pas-sym">[</span><span class="pas-ident">nPos</span><span class="pas-space"> </span><span class="pas-sym">+</span><span class="pas-space"> </span><span class="pas-num">1</span><span class="pas-sym">]</span><span class="pas-sym">)</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-ident">nPos</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-num">8</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-kwd">if</span><span class="pas-space"> </span><span class="pas-ident">nPos</span><span class="pas-space"> </span><span class="pas-sym">&gt;=</span><span class="pas-space"> </span><span class="pas-ident">Size</span><span class="pas-space"> </span><span class="pas-sym">-</span><span class="pas-space"> </span><span class="pas-num">1</span><span class="pas-space"> </span><span class="pas-kwd">then</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-kwd">begin</span></pre>
<pre class="line"><span class="pas-space">      </span><span class="pas-kwd">raise</span><span class="pas-space"> </span><span class="pas-ident">EInvalidGraphic</span><span class="pas-sym">.</span><span class="pas-ident">Create</span><span class="pas-sym">(</span><span class="pas-ident">SInvalidImage</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-kwd">end</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-ident">Height</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">MakeWord</span><span class="pas-sym">(</span><span class="pas-ident">Byte</span><span class="pas-sym">(</span><span class="pas-ident">pImage</span><span class="pas-sym">[</span><span class="pas-ident">nPos</span><span class="pas-sym">]</span><span class="pas-sym">)</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">Byte</span><span class="pas-sym">(</span><span class="pas-ident">pImage</span><span class="pas-sym">[</span><span class="pas-ident">nPos</span><span class="pas-space"> </span><span class="pas-sym">+</span><span class="pas-space"> </span><span class="pas-num">1</span><span class="pas-sym">]</span><span class="pas-sym">)</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-kwd">end</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-kwd">else</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-kwd">begin</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-kwd">raise</span><span class="pas-space"> </span><span class="pas-ident">EInvalidGraphic</span><span class="pas-sym">.</span><span class="pas-ident">Create</span><span class="pas-sym">(</span><span class="pas-ident">SInvalidImage</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-kwd">end</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-kwd">end</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-kwd">end</span><span class="pas-sym">;</span></pre>
</div>
</div>

<p class="credits">
  Tip by Frank Simon
</p>

<h2>
  Answer 3
</h2>

<p>
  This is a customization of Answer 1:
</p>

<div class="frames">
<!-- Highlighted Pascal code generated by DelphiDabbler PasHi -->
<div class="pas-source">
<pre class="line"><span class="pas-kwd">function</span><span class="pas-space"> </span><span class="pas-ident">GoodFileRead</span><span class="pas-sym">(</span><span class="pas-ident">fhdl</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">THandle</span><span class="pas-sym">;</span><span class="pas-space"> </span><span class="pas-ident">buffer</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">Pointer</span><span class="pas-sym">;</span><span class="pas-space"> </span><span class="pas-ident">readsize</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">DWord</span><span class="pas-sym">)</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">Boolean</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-kwd">var</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">numread</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">DWord</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">retval</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">Boolean</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-kwd">begin</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">retval</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">ReadFile</span><span class="pas-sym">(</span><span class="pas-ident">fhdl</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">buffer</span><span class="pas-sym">^</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">readsize</span><span class="pas-space"> </span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">numread</span><span class="pas-space"> </span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-kwd">Nil</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">result</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">retval</span><span class="pas-space"> </span><span class="pas-kwd">And</span><span class="pas-space"> </span><span class="pas-sym">(</span><span class="pas-ident">readsize</span><span class="pas-space"> </span><span class="pas-sym">=</span><span class="pas-space"> </span><span class="pas-ident">numread</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-kwd">end</span><span class="pas-sym">;</span></pre>
<pre class="line"> </pre>
<pre class="line"><span class="pas-kwd">function</span><span class="pas-space"> </span><span class="pas-ident">ReadMWord</span><span class="pas-sym">(</span><span class="pas-ident">fh</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">HFile</span><span class="pas-space"> </span><span class="pas-sym">;</span><span class="pas-space"> </span><span class="pas-kwd">Var</span><span class="pas-space"> </span><span class="pas-ident">value</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">Word</span><span class="pas-sym">)</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">Boolean</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-kwd">type</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">TMotorolaWord</span><span class="pas-space"> </span><span class="pas-sym">=</span><span class="pas-space"> </span><span class="pas-kwd">record</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-kwd">case</span><span class="pas-space"> </span><span class="pas-ident">byte</span><span class="pas-space"> </span><span class="pas-kwd">of</span></pre>
<pre class="line"><span class="pas-space">      </span><span class="pas-num">0</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-sym">(</span><span class="pas-ident">Value</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">word</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">      </span><span class="pas-num">1</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-sym">(</span><span class="pas-ident">Byte1</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">Byte2</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">byte</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-kwd">end</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-kwd">var</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">MW</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TMotorolaWord</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">numread</span><span class="pas-space"> </span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">DWord</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-kwd">begin</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-comment">{ It would probably be better to just read these two bytes in normally and </span></pre>
<pre class="line"><span class="pas-comment">  then do a small ASM routine to swap them.  But we aren't talking about</span></pre>
<pre class="line"><span class="pas-comment">  reading entire files, so I doubt the performance gain would be worth the </span></pre>
<pre class="line"><span class="pas-comment">  trouble.}</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">Result</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">False</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-kwd">if</span><span class="pas-space"> </span><span class="pas-ident">ReadFile</span><span class="pas-sym">(</span><span class="pas-ident">fh</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">MW</span><span class="pas-sym">.</span><span class="pas-ident">Byte2</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">SizeOf</span><span class="pas-sym">(</span><span class="pas-ident">Byte</span><span class="pas-sym">)</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">numread</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-kwd">nil</span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-kwd">then</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-kwd">if</span><span class="pas-space"> </span><span class="pas-ident">ReadFile</span><span class="pas-sym">(</span><span class="pas-ident">fh</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">MW</span><span class="pas-sym">.</span><span class="pas-ident">Byte1</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">SizeOf</span><span class="pas-sym">(</span><span class="pas-ident">Byte</span><span class="pas-sym">)</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">numread</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-kwd">nil</span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-kwd">then</span></pre>
<pre class="line"><span class="pas-space">      </span><span class="pas-ident">Result</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">True</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">Value</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">MW</span><span class="pas-sym">.</span><span class="pas-ident">Value</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-kwd">end</span><span class="pas-sym">;</span></pre>
<pre class="line"> </pre>
<pre class="line"><span class="pas-kwd">function</span><span class="pas-space"> </span><span class="pas-ident">ImageType</span><span class="pas-sym">(</span><span class="pas-ident">Fname</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-kwd">String</span><span class="pas-sym">)</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">Smallint</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-kwd">var</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">ImgExt</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-kwd">String</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">Itype</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">Smallint</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-kwd">begin</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">ImgExt</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">UpperCase</span><span class="pas-sym">(</span><span class="pas-ident">ExtractFileExt</span><span class="pas-sym">(</span><span class="pas-ident">Fname</span><span class="pas-sym">)</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-kwd">if</span><span class="pas-space"> </span><span class="pas-ident">ImgExt</span><span class="pas-space"> </span><span class="pas-sym">=</span><span class="pas-space"> </span><span class="pas-str">'.BMP'</span><span class="pas-space"> </span><span class="pas-kwd">then</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-ident">Itype</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-num">1</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-kwd">else</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-kwd">if</span><span class="pas-space"> </span><span class="pas-sym">(</span><span class="pas-ident">ImgExt</span><span class="pas-space"> </span><span class="pas-sym">=</span><span class="pas-space"> </span><span class="pas-str">'.JPEG'</span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-kwd">or</span><span class="pas-space"> </span><span class="pas-sym">(</span><span class="pas-ident">ImgExt</span><span class="pas-sym">=</span><span class="pas-str">'.JPG'</span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-kwd">then</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-ident">Itype</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-num">2</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-kwd">else</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-ident">Itype</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-num">0</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">Result</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">Itype</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-kwd">end</span><span class="pas-sym">;</span></pre>
<pre class="line"> </pre>
<pre class="line"><span class="pas-kwd">function</span><span class="pas-space"> </span><span class="pas-ident">FetchBitmapHeader</span><span class="pas-sym">(</span><span class="pas-ident">PictFileName</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-kwd">String</span><span class="pas-sym">;</span><span class="pas-space"> </span><span class="pas-kwd">Var</span><span class="pas-space"> </span><span class="pas-ident">wd</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">ht</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">Word</span><span class="pas-sym">)</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">Boolean</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-comment">{similar routine is in &quot;BitmapRegion&quot; routine}</span></pre>
<pre class="line"><span class="pas-kwd">label</span><span class="pas-space"> </span><span class="pas-ident">ErrExit</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-kwd">const</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">ValidSig</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-kwd">array</span><span class="pas-sym">[</span><span class="pas-num">0</span><span class="pas-sym">..</span><span class="pas-num">1</span><span class="pas-sym">]</span><span class="pas-space"> </span><span class="pas-kwd">of</span><span class="pas-space"> </span><span class="pas-ident">byte</span><span class="pas-space"> </span><span class="pas-sym">=</span><span class="pas-space"> </span><span class="pas-sym">(</span><span class="pas-hex">$FF</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-hex">$D8</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">Parameterless</span><span class="pas-space"> </span><span class="pas-sym">=</span><span class="pas-space"> </span><span class="pas-sym">[</span><span class="pas-hex">$01</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-hex">$D0</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-hex">$D1</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-hex">$D2</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-hex">$D3</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-hex">$D4</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-hex">$D5</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-hex">$D6</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-hex">$D7</span><span class="pas-sym">]</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">BmpSig</span><span class="pas-space"> </span><span class="pas-sym">=</span><span class="pas-space"> </span><span class="pas-hex">$4d42</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-kwd">var</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-comment">{Err : Boolean;}</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">fh</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">HFile</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-comment">{tof : TOFSTRUCT;}</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">bf</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TBITMAPFILEHEADER</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">bh</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">TBITMAPINFOHEADER</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-comment">{JpgImg  : TJPEGImage;}</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">Itype</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">Smallint</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">Sig</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-kwd">array</span><span class="pas-sym">[</span><span class="pas-num">0</span><span class="pas-sym">..</span><span class="pas-num">1</span><span class="pas-sym">]</span><span class="pas-space"> </span><span class="pas-kwd">of</span><span class="pas-space"> </span><span class="pas-ident">byte</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">x</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">integer</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">Seg</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">byte</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">Dummy</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-kwd">array</span><span class="pas-sym">[</span><span class="pas-num">0</span><span class="pas-sym">..</span><span class="pas-num">15</span><span class="pas-sym">]</span><span class="pas-space"> </span><span class="pas-kwd">of</span><span class="pas-space"> </span><span class="pas-ident">byte</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">skipLen</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">word</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">OkBmp</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">Readgood</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">Boolean</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-kwd">begin</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-comment">{Open the file and get a handle to it's BITMAPINFO}</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">OkBmp</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">False</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">Itype</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">ImageType</span><span class="pas-sym">(</span><span class="pas-ident">PictFileName</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">fh</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">CreateFile</span><span class="pas-sym">(</span><span class="pas-ident">PChar</span><span class="pas-sym">(</span><span class="pas-ident">PictFileName</span><span class="pas-sym">)</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">GENERIC_READ</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">FILE_SHARE_READ</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-kwd">Nil</span><span class="pas-sym">,</span></pre>
<pre class="line"><span class="pas-space">           </span><span class="pas-ident">OPEN_EXISTING</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">FILE_ATTRIBUTE_NORMAL</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-num">0</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-kwd">if</span><span class="pas-space"> </span><span class="pas-sym">(</span><span class="pas-ident">fh</span><span class="pas-space"> </span><span class="pas-sym">=</span><span class="pas-space"> </span><span class="pas-ident">INVALID_HANDLE_VALUE</span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-kwd">then</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-kwd">goto</span><span class="pas-space"> </span><span class="pas-ident">ErrExit</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-kwd">if</span><span class="pas-space"> </span><span class="pas-ident">Itype</span><span class="pas-space"> </span><span class="pas-sym">=</span><span class="pas-space"> </span><span class="pas-num">1</span><span class="pas-space"> </span><span class="pas-kwd">then</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-kwd">begin</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-comment">{read the BITMAPFILEHEADER}</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-kwd">if</span><span class="pas-space"> </span><span class="pas-kwd">not</span><span class="pas-space"> </span><span class="pas-ident">GoodFileRead</span><span class="pas-sym">(</span><span class="pas-ident">fh</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-sym">@</span><span class="pas-ident">bf</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">sizeof</span><span class="pas-sym">(</span><span class="pas-ident">bf</span><span class="pas-sym">)</span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-kwd">then</span></pre>
<pre class="line"><span class="pas-space">      </span><span class="pas-kwd">goto</span><span class="pas-space"> </span><span class="pas-ident">ErrExit</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-kwd">if</span><span class="pas-space"> </span><span class="pas-sym">(</span><span class="pas-ident">bf</span><span class="pas-sym">.</span><span class="pas-ident">bfType</span><span class="pas-space"> </span><span class="pas-sym">&lt;&gt;</span><span class="pas-space"> </span><span class="pas-ident">BmpSig</span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-kwd">then</span><span class="pas-space">  </span><span class="pas-comment">{'BM'}</span></pre>
<pre class="line"><span class="pas-space">      </span><span class="pas-kwd">goto</span><span class="pas-space"> </span><span class="pas-ident">ErrExit</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-kwd">if</span><span class="pas-space"> </span><span class="pas-kwd">not</span><span class="pas-space"> </span><span class="pas-ident">GoodFileRead</span><span class="pas-sym">(</span><span class="pas-ident">fh</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-sym">@</span><span class="pas-ident">bh</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">sizeof</span><span class="pas-sym">(</span><span class="pas-ident">bh</span><span class="pas-sym">)</span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-kwd">then</span></pre>
<pre class="line"><span class="pas-space">      </span><span class="pas-kwd">goto</span><span class="pas-space"> </span><span class="pas-ident">ErrExit</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-comment">{for now, don't even deal with CORE headers}</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-kwd">if</span><span class="pas-space"> </span><span class="pas-sym">(</span><span class="pas-ident">bh</span><span class="pas-sym">.</span><span class="pas-ident">biSize</span><span class="pas-space"> </span><span class="pas-sym">=</span><span class="pas-space"> </span><span class="pas-ident">sizeof</span><span class="pas-sym">(</span><span class="pas-ident">TBITMAPCOREHEADER</span><span class="pas-sym">)</span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-kwd">then</span></pre>
<pre class="line"><span class="pas-space">      </span><span class="pas-kwd">goto</span><span class="pas-space"> </span><span class="pas-ident">ErrExit</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-ident">wd</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">bh</span><span class="pas-sym">.</span><span class="pas-ident">biWidth</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-ident">ht</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">bh</span><span class="pas-sym">.</span><span class="pas-ident">biheight</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-ident">OkBmp</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">True</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-kwd">end</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-kwd">else</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-kwd">if</span><span class="pas-space"> </span><span class="pas-sym">(</span><span class="pas-ident">Itype</span><span class="pas-space"> </span><span class="pas-sym">=</span><span class="pas-space"> </span><span class="pas-num">2</span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-kwd">then</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-kwd">begin</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-ident">FillChar</span><span class="pas-sym">(</span><span class="pas-ident">Sig</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">SizeOf</span><span class="pas-sym">(</span><span class="pas-ident">Sig</span><span class="pas-sym">)</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-str">#0</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-kwd">if</span><span class="pas-space"> </span><span class="pas-kwd">not</span><span class="pas-space"> </span><span class="pas-ident">GoodFileRead</span><span class="pas-sym">(</span><span class="pas-ident">fh</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-sym">@</span><span class="pas-ident">Sig</span><span class="pas-sym">[</span><span class="pas-num">0</span><span class="pas-sym">]</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">sizeof</span><span class="pas-sym">(</span><span class="pas-ident">Sig</span><span class="pas-sym">)</span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-kwd">then</span></pre>
<pre class="line"><span class="pas-space">      </span><span class="pas-kwd">goto</span><span class="pas-space"> </span><span class="pas-ident">ErrExit</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">    </span><span class="pas-kwd">for</span><span class="pas-space"> </span><span class="pas-ident">x</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">Low</span><span class="pas-sym">(</span><span class="pas-ident">Sig</span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-kwd">to</span><span class="pas-space"> </span><span class="pas-ident">High</span><span class="pas-sym">(</span><span class="pas-ident">Sig</span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-kwd">do</span></pre>
<pre class="line"><span class="pas-space">      </span><span class="pas-kwd">if</span><span class="pas-space"> </span><span class="pas-ident">Sig</span><span class="pas-sym">[</span><span class="pas-ident">x</span><span class="pas-sym">]</span><span class="pas-space"> </span><span class="pas-sym">&lt;&gt;</span><span class="pas-space"> </span><span class="pas-ident">ValidSig</span><span class="pas-sym">[</span><span class="pas-ident">x</span><span class="pas-sym">]</span><span class="pas-space"> </span><span class="pas-kwd">then</span></pre>
<pre class="line"><span class="pas-space">        </span><span class="pas-kwd">goto</span><span class="pas-space"> </span><span class="pas-ident">ErrExit</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">      </span><span class="pas-ident">Readgood</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">GoodFileRead</span><span class="pas-sym">(</span><span class="pas-ident">fh</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-sym">@</span><span class="pas-ident">Seg</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">sizeof</span><span class="pas-sym">(</span><span class="pas-ident">Seg</span><span class="pas-sym">)</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">      </span><span class="pas-kwd">while</span><span class="pas-space"> </span><span class="pas-sym">(</span><span class="pas-ident">Seg</span><span class="pas-space"> </span><span class="pas-sym">=</span><span class="pas-space"> </span><span class="pas-hex">$FF</span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-kwd">and</span><span class="pas-space"> </span><span class="pas-ident">Readgood</span><span class="pas-space"> </span><span class="pas-kwd">do</span></pre>
<pre class="line"><span class="pas-space">      </span><span class="pas-kwd">begin</span></pre>
<pre class="line"><span class="pas-space">        </span><span class="pas-ident">Readgood</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">GoodFileRead</span><span class="pas-sym">(</span><span class="pas-ident">fh</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-sym">@</span><span class="pas-ident">Seg</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">sizeof</span><span class="pas-sym">(</span><span class="pas-ident">Seg</span><span class="pas-sym">)</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">        </span><span class="pas-kwd">if</span><span class="pas-space"> </span><span class="pas-ident">Seg</span><span class="pas-space"> </span><span class="pas-sym">&lt;&gt;</span><span class="pas-space"> </span><span class="pas-hex">$FF</span><span class="pas-space"> </span><span class="pas-kwd">then</span></pre>
<pre class="line"><span class="pas-space">        </span><span class="pas-kwd">begin</span></pre>
<pre class="line"><span class="pas-space">          </span><span class="pas-kwd">if</span><span class="pas-space"> </span><span class="pas-sym">(</span><span class="pas-ident">Seg</span><span class="pas-space"> </span><span class="pas-sym">=</span><span class="pas-space"> </span><span class="pas-hex">$C0</span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-kwd">or</span><span class="pas-space"> </span><span class="pas-sym">(</span><span class="pas-ident">Seg</span><span class="pas-space"> </span><span class="pas-sym">=</span><span class="pas-space"> </span><span class="pas-hex">$C1</span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-kwd">or</span><span class="pas-space"> </span><span class="pas-sym">(</span><span class="pas-ident">Seg</span><span class="pas-space"> </span><span class="pas-sym">=</span><span class="pas-space"> </span><span class="pas-hex">$C2</span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-kwd">then</span></pre>
<pre class="line"><span class="pas-space">          </span><span class="pas-kwd">begin</span></pre>
<pre class="line"><span class="pas-space">            </span><span class="pas-ident">Readgood</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">GoodFileRead</span><span class="pas-sym">(</span><span class="pas-ident">fh</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-sym">@</span><span class="pas-ident">Dummy</span><span class="pas-sym">[</span><span class="pas-num">0</span><span class="pas-sym">]</span><span class="pas-sym">,</span><span class="pas-num">3</span><span class="pas-sym">)</span><span class="pas-sym">;</span><span class="pas-space">  </span><span class="pas-comment">{don't need these bytes}</span></pre>
<pre class="line"><span class="pas-space">            </span><span class="pas-kwd">if</span><span class="pas-space"> </span><span class="pas-ident">ReadMWord</span><span class="pas-sym">(</span><span class="pas-ident">fh</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">ht</span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-kwd">and</span><span class="pas-space"> </span><span class="pas-ident">ReadMWord</span><span class="pas-sym">(</span><span class="pas-ident">fh</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">wd</span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-kwd">then</span></pre>
<pre class="line"><span class="pas-space">              </span><span class="pas-ident">OkBmp</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">True</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">          </span><span class="pas-kwd">end</span></pre>
<pre class="line"><span class="pas-space">          </span><span class="pas-kwd">else</span></pre>
<pre class="line"><span class="pas-space">          </span><span class="pas-kwd">begin</span></pre>
<pre class="line"><span class="pas-space">            </span><span class="pas-kwd">if</span><span class="pas-space"> </span><span class="pas-kwd">not</span><span class="pas-space"> </span><span class="pas-sym">(</span><span class="pas-ident">Seg</span><span class="pas-space"> </span><span class="pas-kwd">in</span><span class="pas-space"> </span><span class="pas-ident">Parameterless</span><span class="pas-sym">)</span><span class="pas-space"> </span><span class="pas-kwd">then</span></pre>
<pre class="line"><span class="pas-space">            </span><span class="pas-kwd">begin</span></pre>
<pre class="line"><span class="pas-space">              </span><span class="pas-ident">ReadMWord</span><span class="pas-sym">(</span><span class="pas-ident">fh</span><span class="pas-sym">,</span><span class="pas-ident">skipLen</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">              </span><span class="pas-ident">SetFilePointer</span><span class="pas-sym">(</span><span class="pas-ident">fh</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">skipLen</span><span class="pas-space"> </span><span class="pas-sym">-</span><span class="pas-space"> </span><span class="pas-num">2</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-kwd">nil</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">FILE_CURRENT</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">              </span><span class="pas-ident">GoodFileRead</span><span class="pas-sym">(</span><span class="pas-ident">fh</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-sym">@</span><span class="pas-ident">Seg</span><span class="pas-sym">,</span><span class="pas-space"> </span><span class="pas-ident">sizeof</span><span class="pas-sym">(</span><span class="pas-ident">Seg</span><span class="pas-sym">)</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">            </span><span class="pas-kwd">end</span></pre>
<pre class="line"><span class="pas-space">            </span><span class="pas-kwd">else</span></pre>
<pre class="line"><span class="pas-space">              </span><span class="pas-ident">Seg</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-hex">$FF</span><span class="pas-sym">;</span><span class="pas-space">  </span><span class="pas-comment">{Fake it to keep looping}</span></pre>
<pre class="line"><span class="pas-space">          </span><span class="pas-kwd">end</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">        </span><span class="pas-kwd">end</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">      </span><span class="pas-kwd">end</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-kwd">end</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">ErrExit</span><span class="pas-sym">:</span><span class="pas-space"> </span><span class="pas-ident">CloseHandle</span><span class="pas-sym">(</span><span class="pas-ident">fh</span><span class="pas-sym">)</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-space">  </span><span class="pas-ident">Result</span><span class="pas-space"> </span><span class="pas-sym">:=</span><span class="pas-space"> </span><span class="pas-ident">OkBmp</span><span class="pas-sym">;</span></pre>
<pre class="line"><span class="pas-kwd">end</span><span class="pas-sym">;</span></pre>
</div>
</div>

<p class="credits">
  Tip author unknown
</p>
