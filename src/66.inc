<p>
  Here are some routines you can use to test and convert between Delphi's
  binary and text form (<code>.dfm</code>) file formats.
</p>

<h2>
  Test for a binary form file
</h2>

<div class="frame">
<!-- Highlighted Pascal code generated by DelphiDabbler PasH -->
<pre class="pas-source"><span class="pas-comment">// returns true if dfm file is in a binary format</span>
<span class="pas-kwd">function</span> IsDFMBinary(FileName: <span class="pas-kwd">string</span>): Boolean;
<span class="pas-kwd">var</span>
  F: TFileStream;
  B: Byte;
<span class="pas-kwd">begin</span>
  B := <span class="pas-num">0</span>;
  F := TFileStream.Create(FileName, fmOpenRead);
  <span class="pas-kwd">try</span>
    F.<span class="pas-kwd">Read</span>( B, <span class="pas-num">1</span> );
    Result := B = <span class="pas-hex">$FF</span>;
  <span class="pas-kwd">finally</span>
    F.Free;
  <span class="pas-kwd">end</span>;
<span class="pas-kwd">end</span>;</pre>
</div>

<h2>
  Convert from binary to text and vice versa
</h2>

<div class="frame">
<!-- Highlighted Pascal code generated by DelphiDabbler PasH -->
<pre class="pas-source"><span class="pas-comment">// convert a binary dfm file to a text dfm file</span>
<span class="pas-kwd">function</span> Dfm2Txt(Src, Dest: <span class="pas-kwd">string</span>): boolean;
<span class="pas-kwd">var</span>
  SrcS, DestS: TFileStream;
<span class="pas-kwd">begin</span>
  <span class="pas-kwd">if</span> Src = Dest <span class="pas-kwd">then</span>
  <span class="pas-kwd">begin</span>
    MessageDlg(<span class="pas-str">'Error converting dfm file to binary!. '</span>
      + <span class="pas-str">'The source file and destination file names are the same.'</span>,
      mtError, [mbOK], <span class="pas-num">0</span>);
    result := False;
    exit;
  <span class="pas-kwd">end</span>;
  SrcS := TFileStream.Create(Src, fmOpenRead);
  DestS := TFileStream.Create(Dest, fmCreate);
  <span class="pas-kwd">try</span>
    ObjectResourceToText(SrcS, DestS);
    <span class="pas-kwd">if</span> FileExists(Src) <span class="pas-kwd">and</span> FileExists(Dest) <span class="pas-kwd">then</span>
      Result := True
    <span class="pas-kwd">else</span>
      Result := False;
  <span class="pas-kwd">finally</span>
    SrcS.Free;
    DestS.Free;
  <span class="pas-kwd">end</span>;
<span class="pas-kwd">end</span>;

<span class="pas-comment">// convert a text DFM file to a binary DFM file</span>
<span class="pas-kwd">function</span> Txt2DFM(Src, Dest: <span class="pas-kwd">string</span>): boolean;
<span class="pas-kwd">var</span>
  SrcS, DestS: TFileStream;
<span class="pas-kwd">begin</span>
  <span class="pas-kwd">if</span> Src = Dest <span class="pas-kwd">then</span>
  <span class="pas-kwd">begin</span>
    MessageDlg(<span class="pas-str">'Error converting dfm file to binary!. '</span>
      + <span class="pas-str">'The source file and destination file names are the same.'</span>,
      mtError, [mbOK], <span class="pas-num">0</span>);
    Result := False;
    exit;
  <span class="pas-kwd">end</span>;
  SrcS := TFileStream.Create(Src, fmOpenRead);
  DestS := TFileStream.Create(Dest, fmCreate);
  <span class="pas-kwd">try</span>
    ObjectTextToResource(SrcS, DestS);
    <span class="pas-kwd">if</span> FileExists(Src) <span class="pas-kwd">and</span> FileExists(Dest) <span class="pas-kwd">then</span>
      Result := True
    <span class="pas-kwd">else</span>
      Result := False;
  <span class="pas-kwd">finally</span>
    SrcS.Free;
    DestS.Free;
  <span class="pas-kwd">end</span>;
<span class="pas-kwd">end</span>;</pre>
</div>

<h2>
  Open a Binary DFM File as a Text Stream
</h2>

<div class="frame">
<!-- Highlighted Pascal code generated by DelphiDabbler PasH -->
<pre class="pas-source">
<span class="pas-comment">/// open a binary DFM file as a text stream</span>
<span class="pas-kwd">function</span> DfmFile2Stream(<span class="pas-kwd">const</span> Src: <span class="pas-kwd">string</span>; Dest: TStream): boolean;
<span class="pas-kwd">var</span>
  SrcS: TFileStream;
<span class="pas-kwd">begin</span>
  SrcS := TFileStream.Create(Src, fmOpenRead <span class="pas-kwd">or</span> fmShareDenyWrite);
  <span class="pas-kwd">try</span>
    ObjectResourceToText(SrcS, Dest);
    Result := True;
  <span class="pas-kwd">finally</span>
    SrcS.Free;
  <span class="pas-kwd">end</span>;
<span class="pas-kwd">end</span>;</pre>
</div>